AWSTemplateFormatVersion: '2010-09-09'
Description: 'Prisma Access ZTNA Connector Deployment, use this template for 1-ARM
  deployments only. Version: 4.0 Date: 02-28-2023 Contact:  https://www.paloaltonetworks.com/company/contact-support '
Parameters:
  InstanceName:
    Description: ZTNA Connector EC2 Instance Name
    Type: String
  IONKey:
    Description: ZTNA Connector Key
    Type: String
  IONSecret:
    Description: ZTNA Connector Secret
    Type: String
    NoEcho: true
  MyVPC:
    Description: VPC to operate in
    Type: AWS::EC2::VPC::Id
  PublicSubnet:
    Description: Subnet for Public port
    Type: AWS::EC2::Subnet::Id
  DCLanIP:
    Description: Optionally specify a static IP for Single port, 0.0.0.0 = DHCP
    Type: String
    MinLength: '7'
    MaxLength: '15'
    Default: 0.0.0.0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    ConstraintDescription: must be a valid IPv4 address in the form x.x.x.x
Conditions:
  StaticDCLanIP: !Not [!Equals [!Ref 'DCLanIP', 0.0.0.0]]
Mappings:
  RegionMap:
    us-east-1:
      ION: ami-04607de185d0f0bc4
    us-east-2:
      ION: ami-0986571b2e707fabf
    us-west-1:
      ION: ami-04b093473dba5ae28
    us-west-2:
      ION: ami-04aa50b42972bed97
    ca-central-1:
      ION: ami-0c1d2704dbfd0c642
    eu-central-1:
      ION: ami-00a7c85ca30032549
    eu-central-2:
      ION: ami-0d688c146dce25ec2
    eu-west-1:
      ION: ami-032e081755e45dc81
    eu-west-2:
      ION: ami-04c3276680b59e0ec
    eu-west-3:
      ION: ami-0619a0e2cb462be89
    ap-southeast-1:
      ION: ami-0944ff7eb62413996
    ap-southeast-2:
      ION: ami-08a263a8e65cac192
    ap-southeast-3:
      ION: ami-005b6b05cb73247b9
    ap-southeast-4:
      ION: ami-0c3eed3f53185a204
    ap-south-1:
      ION: ami-0285a74981328ae3f
    ap-south-2:
      ION: ami-028c671c6cb485f0b
    ap-northeast-1:
      ION: ami-07ae5e31a2976240a
    ap-northeast-2:
      ION: ami-0db9296948668308b
    ap-northeast-3:
      ION: ami-01619fbda3693c458
    sa-east-1:
      ION: ami-087ddfd8226b61a94
    eu-north-1:
      ION: ami-0e6d02d1931c66d3c
    ap-east-1:
      ION: ami-02535ff34f9d0d603
    me-south-1:
      ION: ami-0d892c07a074f5cc1
    me-central-1:
      ION: ami-0ac02ecb3527141d1
    af-south-1:
      ION: ami-0034cb279def0616e
    eu-south-1:
      ION: ami-0446c494cded6fab6
    eu-south-2:
      ION: ami-02b9ae6c5c6bf919c
    ca-west-1:
      ION: ami-0803f49256facb017
    il-central-1:
      ION: ami-07980092312268a80
    us-gov-east-1:
      ION: ami-0525bc7c66582b4c6
    us-gov-west-1:
      ION: ami-0fddbb8f3f06c01a9
  InstanceMap:
    ion200v:
      instanceType: m5.xlarge
  ModelMap:
    ion200v:
      model: ion 200v
Resources:
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !FindInMap [InstanceMap, ion200v, instanceType]
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', ION]
      NetworkInterfaces:
      - NetworkInterfaceId: !Ref 'DCLanIface'
        DeviceIndex: 0
      UserData: !Base64
        Fn::Sub:
        - "General:\n  model: ${LocalModelMap}\n\nLicense:\n  key: ${IONKey}\n  secret:\
          \ ${IONSecret}\n\n1:\n  role: PublicWAN\n  type: DHCP\n"
        - LocalModelMap: !FindInMap [ModelMap, ion200v, model]
      Tags:
      - Key: Name
        Value: !Ref 'InstanceName'
  DCLanIface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      PublicIpAddress: !If [StaticDCLanIP, !Ref 'DCLanIP', !Ref 'AWS::NoValue']
      SubnetId: !Ref 'PublicSubnet'
      Description: Interface for single port
      GroupSet:
      - !Ref 'ZTNASG'
      SourceDestCheck: false
      Tags:
      - Key: Network
        Value: DCLan
  ZTNASG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-security-group'
      GroupDescription: ZTNA Connector Allow Egress SG
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0
      VpcId: !Ref 'MyVPC'
      Tags:
      - Key: Name
        Value: !Join [' ', [!Ref 'InstanceName', Public Security Group]]
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Required Network Configuration
      Parameters:
      - MyVPC
      - PublicSubnet
    - Label:
        default: Required ZTNA Connector Details
      Parameters:
      - InstanceName
      - IONKey
      - IONSecret
    - Label:
        default: Optional Network Configuration
      Parameters:
      - DCLanIP
    ParameterLabels:
      MyVPC:
        default: Which VPC should ZTNA Connector be deployed to?
      PublicSubnet:
        default: Specify the subnet for the single port
      DCLanIP:
        default: Single Port Static IP
      IONKey:
        default: Provide the ZTNA Connector License Key
      IONSecret:
        default: Provide the ZTNA Connector License Secret
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'MyEC2Instance'
  IONModel:
    Description: ION model selected
    Value: !FindInMap [ModelMap, ion200v, model]
